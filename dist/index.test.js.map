{"version":3,"sources":["../src/index.test.js"],"names":["assert","require","rulr","number","checkType","Number","assertRule","rule","data","expectedResult","actualResult","deepEqual","lessThan10","path","pathError","describe","it","pathString","equal","message","type","typeError","composeRules","rules","first","isString","constructor","String","error","checkBool","Error","ex","checkThrow","pattern","checkRegex","postReq","optional","undefined","missingKeyError","required","schema","foo","objectError","keyError","invalidKeyError","restrictToSchema","bar","arrayError","restrictToCollection"],"mappings":"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","file":"index.test.js","sourcesContent":["'use strict';\nconst assert = require('assert');\nconst rulr = require('./index');\n\nconst number = rulr.checkType(Number);\n\nconst assertRule = (rule, data, expectedResult) => {\n  const actualResult = rule(data, ['data']);\n  assert.deepEqual(actualResult, expectedResult);\n};\n\nconst lessThan10 = (data, path) =>\n  data < 10 ? [] : [rulr.pathError(`${data} should be less than 10`)(path)];\n\ndescribe('pathString', () => {\n  it('should join keys with dots', () => {\n    const path = ['foo', 'bar', 0];\n    const actualResult = rulr.pathString(path);\n    const expectedResult = '`foo.bar.0`';\n    assert.equal(actualResult, expectedResult);\n  });\n  it('should an empty path', () => {\n    const path = [];\n    const actualResult = rulr.pathString(path);\n    const expectedResult = '``';\n    assert.equal(actualResult, expectedResult);\n  });\n});\n\ndescribe('pathError', () => {\n  it('should return a string with a message and path', () => {\n    const message = 'Problem';\n    const path = ['foo', 'bar', 0];\n    const actualResult = rulr.pathError(message)(path);\n    const expectedResult = 'Problem in `foo.bar.0`';\n    assert.equal(actualResult, expectedResult);\n  });\n  it('should return a string with a default message and no path', () => {\n    const path = ['foo', 'bar', 0];\n    const actualResult = rulr.pathError()(path);\n    const expectedResult = 'Problem in `foo.bar.0`';\n    assert.equal(actualResult, expectedResult);\n  });\n});\n\ndescribe('typeError', () => {\n  it('should return a string with data, type, and path', () => {\n    const type = 'String';\n    const data = 10;\n    const path = ['data'];\n    const actualResult = rulr.typeError(type)(data)(path);\n    const expectedResult = '`10` is not a valid String in `data`';\n    assert.equal(actualResult, expectedResult);\n  });\n});\n\ndescribe('composeRules', () => {\n  it('should return a new empty rule', () => {\n    assertRule(rulr.composeRules([]), 10, []);\n  });\n  it('should return a new rule', () => {\n    const rules = [number, lessThan10];\n    assertRule(rulr.composeRules(rules), 'hello', [\n      '`\\\"hello\\\"` is not a valid Number in `data`',\n      'hello should be less than 10 in `data`',\n    ]);\n  });\n});\n\ndescribe('first', () => {\n  const rule = rulr.first(number, lessThan10);\n\n  it('should use the pre-requisite first', () => {\n    assertRule(rule, 'hello', ['`\\\"hello\\\"` is not a valid Number in `data`']);\n  });\n  it('should use the post-requisite second', () => {\n    assertRule(rule, 10, ['10 should be less than 10 in `data`']);\n  });\n});\n\ndescribe('checkBool', () => {\n  const isString = data => data.constructor === String;\n  const error = data => rulr.pathError(`${data} is incorrect`);\n  const rule = rulr.checkBool(isString, error);\n\n  it('should return an error if result is false', () => {\n    assertRule(rule, 10, ['10 is incorrect in `data`']);\n  });\n  it('should not return an error if result is true', () => {\n    assertRule(rule, 'hello', []);\n  });\n});\n\ndescribe('checkThrow', () => {\n  const isString = (data) => {\n    if (data.constructor !== String) throw new Error(`${data} is incorrect`);\n  };\n  const error = (data, ex) => rulr.pathError(`${data} error - ${ex.message}`);\n\n  it('should return an exception message', () => {\n    assertRule(rulr.checkThrow(isString), 10, ['10 is incorrect in `data`']);\n  });\n  it('should return an error if an exception is thrown', () => {\n    const rule = rulr.checkThrow(isString, error);\n    assertRule(rule, 10, ['10 error - 10 is incorrect in `data`']);\n  });\n  it('should not return an error if an exception is not thrown', () => {\n    assertRule(rulr.checkThrow(isString), 'hello', []);\n  });\n});\n\ndescribe('checkType', () => {\n  const rule = rulr.checkType(String, rulr.typeError);\n\n  it('should return an error if the constructor is incorrect', () => {\n    assertRule(rule, 10, ['`10` is not a valid String in `data`']);\n  });\n  it('should not return an error if the constructor is correct', () => {\n    assertRule(rule, 'hello', []);\n  });\n});\n\ndescribe('checkRegex', () => {\n  const pattern = /hello/;\n  const error = data => rulr.pathError(`${data} is incorrect`);\n  const rule = rulr.checkRegex(pattern, error);\n\n  it('should return an error if the data is not a string', () => {\n    assertRule(rule, 10, ['`10` is not a valid String in `data`']);\n  });\n  it('should return an error if the pattern is incorrect', () => {\n    assertRule(rule, 'blabla', ['blabla is incorrect in `data`']);\n  });\n  it('should not return an error if the pattern is correct', () => {\n    assertRule(rule, 'hello', []);\n  });\n});\n\ndescribe('optional', () => {\n  const postReq = rulr.checkType(String);\n  const rule = rulr.optional(postReq);\n\n  it('should return an error if data is defined and incorrect', () => {\n    assertRule(rule, 10, ['`10` is not a valid String in `data`']);\n  });\n  it('should not return an error if data is undefined', () => {\n    assertRule(rule, undefined, []);\n  });\n  it('should not return an error if data is defined and correct', () => {\n    assertRule(rule, 'hello', []);\n  });\n});\n\ndescribe('required', () => {\n  const postReq = rulr.checkType(String);\n  const error = rulr.missingKeyError;\n  const rule = rulr.required(postReq, error);\n\n  it('should return an error if data is defined and incorrect', () => {\n    assertRule(rule, 10, ['`10` is not a valid String in `data`']);\n  });\n  it('should return an error if data is undefined', () => {\n    assertRule(rule, undefined, ['Missing required value in `data`']);\n  });\n  it('should not return an error if data is defined and correct', () => {\n    assertRule(rule, 'hello', []);\n  });\n});\n\ndescribe('restrictToSchema', () => {\n  const schema = { foo: rulr.checkType(String) };\n  const objectError = rulr.typeError;\n  const keyError = rulr.invalidKeyError;\n  const rule = rulr.restrictToSchema(schema, objectError, keyError);\n\n  it('should return an error data is not an object', () => {\n    assertRule(rule, 10, ['`10` is not a valid Object in `data`']);\n  });\n  it('should return an error if keys are invalid', () => {\n    const expectedResult = ['Invalid keys `bar` found in `data`'];\n    assertRule(rule, { foo: 'hello', bar: 10 }, expectedResult);\n  });\n  it('should return an error if data is incorrect', () => {\n    const expectedResult = ['`10` is not a valid String in `data.foo`'];\n    assertRule(rule, { foo: 10 }, expectedResult);\n  });\n  it('should not return an error if data is correct', () => {\n    const data = { foo: 'hello' };\n    assertRule(rule, { foo: 'hello' }, []);\n  });\n});\n\ndescribe('restrictToCollection', () => {\n  const postReq = index => rulr.checkType(String);\n  const arrayError = rulr.typeError;\n  const rule = rulr.restrictToCollection(postReq, arrayError);\n\n  it('should return an error data is not an array', () => {\n    const expectedResult = ['`10` is not a valid Array in `data`'];\n    assertRule(rule, 10, expectedResult);\n  });\n  it('should return an error if data is incorrect', () => {\n    const expectedResult = ['`10` is not a valid String in `data.0`'];\n    assertRule(rule, [10], expectedResult);\n  });\n  it('should not return an error if data is correct', () => {\n    assertRule(rule, ['hello'], []);\n  });\n});\n"]}