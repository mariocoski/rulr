{"version":3,"sources":["../src/index.js"],"names":["pathString","path","join","pathError","msg","composeRules","data","rules","reduce","errors","rule","concat","first","preReq","preReqErrors","length","checkBool","checker","error","failedCheckError","ex","message","checkThrow","typeError","JSON","stringify","type","checkType","undefined","constructor","name","checkRegex","regex","String","test","optional","missingKeyError","required","invalidKeyError","invalidKeys","restrictToKeys","keys","objectError","Object","filter","includes","key","hasSchema","schema","restrictToSchema","restrictToCollection","Array","elem","index","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n// Path = String[]\n// Path -> String\nconst pathString = path =>\n  `\\`${path.join('.')}\\``;\n\n// PathError = Path -> Error\n// String -> PathError\nconst pathError = (msg = 'Problem') => path =>\n  `${msg} in ${pathString(path)}`;\n\n\n// Rule[] -> Rule\nconst composeRules = rules => (data, path) =>\n  rules.reduce((errors, rule) =>\n    errors.concat(rule(data, path))\n  , []);\n\n// (Rule, Rule) -> Rule\nconst first = (preReq, rule) => (data, path) => {\n  const preReqErrors = preReq(data, path);\n  if (preReqErrors.length > 0) return preReqErrors;\n  return rule(data, path);\n};\n\n// ((Data -> Bool), (Data -> PathError)) -> Rule\nconst checkBool = (checker, error) => (data, path) =>\n  checker(data) ? [] : [error(data)(path)];\n\n// Data = Any\n// (Data, Exception) -> PathError\nconst failedCheckError = (data, ex) =>\n  pathError(ex.message);\n\n// ((Data -> Void), (Data -> PathError)) -> Rule\nconst checkThrow = (checker, error = failedCheckError) => (data, path) => {\n  try {\n    checker(data);\n    return [];\n  } catch (ex) {\n    return [error(data, ex)(path)];\n  }\n};\n\n// String -> Data -> PathError\nconst typeError = type => data =>\n  pathError(`\\`${JSON.stringify(data)}\\` is not a valid ${type}`);\n\n// (Any, (Data, Any) -> PathError) -> Rule\nconst checkType = (\n  type, error = typeError\n) => (data, path) => (\n  data === undefined || data === null || data.constructor !== type ?\n  [error(type.name)(data)(path)] :\n  []\n);\n\n// (Regex, Data -> PathError) -> Rule\nconst checkRegex = (\n  regex, error = () => pathError()\n) => first(checkType(String), (data, path) =>\n  regex.test(data) ? [] : [error(data)(path)]\n);\n\n\n// Rule -> Rule\nconst optional = rule => (data, path) =>\n  data === undefined ? [] : rule(data, path);\n\n// PathError\nconst missingKeyError = pathError('Missing required value');\n\n// Rule = (Data, Path) -> Error[]\n// (Rule, PathError) -> Rule\nconst required = (rule, error = missingKeyError) => (data, path) =>\n  data === undefined ? [error(path)] : rule(data, path);\n\n// String[] -> PathError\nconst invalidKeyError = invalidKeys =>\n  pathError(`Invalid keys \\`${invalidKeys.join('\\`, \\`')}\\` found`);\n\n// (String[] -> (String -> PathError), (Data -> PathError)) -> Rule\nconst restrictToKeys = (keys, error = invalidKeyError, objectError) =>\n  first(checkType(Object, objectError), (data, path) => {\n    const invalidKeys = Object.keys(data).filter(key => !keys.includes(key));\n    return invalidKeys.length === 0 ? [] : [error(invalidKeys)(path)];\n  });\n\n// Schema = {String: Rule}\n// (Schema, (Data -> PathError)) -> Rule\nconst hasSchema = (schema, objectError) => first(checkType(Object, objectError), (data, path) =>\n  Object.keys(schema).reduce((errors, key) =>\n    errors.concat(schema[key](data[key], path.concat([key])))\n  , [])\n);\n\n// (Schema, (Data -> PathError), (String -> PathError)) -> Rule\nconst restrictToSchema = (schema, objectError, invalidKeyError) =>\n  first(checkType(Object, objectError), composeRules([\n    hasSchema(schema),\n    restrictToKeys(Object.keys(schema), invalidKeyError),\n  ]));\n\n\n// (Rule, (Data -> PathError)) -> Rule\nconst restrictToCollection = (\n  rule, error\n) => first(checkType(Array, error), (data, path) =>\n  data.reduce((errors, elem, index) =>\n    errors.concat(rule(index)(elem, path.concat([index])))\n  , [])\n);\n\n\nmodule.exports = {\n  pathString,\n  pathError,\n  typeError,\n  composeRules,\n  first,\n  checkBool,\n  checkThrow,\n  checkType,\n  checkRegex,\n  optional,\n  required,\n  restrictToKeys,\n  hasSchema,\n  restrictToSchema,\n  restrictToCollection,\n};\n"]}